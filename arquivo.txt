Serve para o backend, criação de rotas
Arquitetura: event-loop (pilha de eventos); single-thread; Non-Blocking I/O;
API Rest: Requisição e Resposta; Rotas (GET:pega; POST:cria; PUT:edita; DELETE:deleta); Estrutura de dados (JSON())
HTTP Code: 1xx (Informação); 2xx (Sucess); 3xx (Redirecionamento); 4xx (Cliente Erro); 5xx (Server Error)

Comandos:
npm add express > adiciona o express
npm i typescript - D > adiciona o typescript como ambiente de desenvolvimento
npx tsc --init > onde vai configurações
npm add @types/express -D > type do express
npm add ts-node-dev -D > coloca no arquivo package.json, dentro de script: "dev": "ts-node-dev --transpile-only src/server.ts"
npm run dev

conceitos das rotas:
query params: ?nome=comprar
route params: /tarefas/2
request body: {nome:"marcos"}

MEXENDO NO PRISMA:
npm install prisma --save-dev > Instalar o prisma para mexer no banco de dados
npm install @prisma/client > Para configurar o cliente do prisma
npx prisma init > iniciar prisma
npx prisma generate > Gerar o prisma
npx prisma migrate dev --name initial_migration > Depois de configurar o banco de dados, basta inicializar 

LIB PARA CRIPTOGRAFAR SENHAS:
npm add bcryptjs

TOKENS (JWT):
npm add jsonwebtoken

VERIFICAR SE ESTÁ OK O JWT:
https://www.md5hashgenerator.com/ > faz o JWT
https://jwt.io/ > verifica o token gerado

TRABALHAR COM IMAGENS:
npm add multer
npm add @types/multer -D



TABELA


model UserStore {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String   // Chave estrangeira para User
  store        Store    @relation(fields: [storeId], references: [id])
  storeId      String   // Chave estrangeira para Store
  isVerified   Boolean  @default(false)       // Campo de verificação
  imageName    String?                        // Nome da imagem
  createdAt    DateTime @default(now())       // Data de criação

  @@unique([userId, storeId])                 // Impede duplicação de pares usuário-loja
}

model Image {
  id        String      @id @default(uuid())
  url       String
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime    @default(now())
}
